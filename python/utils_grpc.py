import grpc
import service_pb2 as convai_service_msg
import service_pb2_grpc as convai_service

from typing import Generator
import io
import os
import re

# import pyaudio
# from pydub import AudioSegment

# import configparser
import google.protobuf.text_format as text_format
import traceback

# Local imports
from messageTypes import MessageTypes

API_KEY = os.getenv("CONVAI_API_KEY")
CHARACTER_ID = os.getenv("CONVAI_CHARACTER_ID")
GRPC_ENDPOINT = os.getenv("CHARACTER_GET_RESPONSE_URL_GRPC")

channel = grpc.secure_channel(GRPC_ENDPOINT, grpc.ssl_channel_credentials())
client = convai_service.ConvaiServiceStub(channel)
session_id_printed = False
session_id = ""

get_response_config = convai_service_msg.GetResponseRequest.GetResponseConfig()
get_response_config.api_key = API_KEY
get_response_config.character_id = CHARACTER_ID

    
def _getResponseRequests(userQuery: str, sessionID: str):
    '''
    This function send the required information to the convai grpc servers to get back
    a response from the bot to the given user query.
    Returns:
        text: <response from the bot>
        sessionID: <marks the chat-session the conversation belongs to>  [Refer docs for more details]
    '''
    # Here we first set the session id of the chat in the response config
    if sessionID != "":
        get_response_config.session_id = session_id
    else:
        get_response_config.session_id = "-1"

    # First request to the grpc endpoint will be the response config
    yield convai_service_msg.GetResponseRequest(
        get_response_config = get_response_config    
    )

    yield convai_service_msg.GetResponseRequest(
            get_response_data = convai_service_msg.GetResponseRequest.GetResponseData(
                text_data = userQuery
            )
        )
    
def _parseGRPCResponse(res_gen: Generator, session_id: str, play_audio: bool):
    '''
    This function is use to pare the generator response from the gRPC server and
    return the text or play the audio respectively.
    '''
    text_response = ""
    for response in res_gen:
        if session_id == "" and response.session_id != "":
            session_id = response.session_id
        if response.HasField("user_query"):
            '''
            This section handles the response from STT for sudio input from user
            '''
            pass
            
        if response.HasField("audio_response"):
            text_response += response.audio_response.text_data.strip() + " "
            if(play_audio):
                # TO-DO play audio returned from the server
                pass
            if response.audio_response.end_of_response:
                '''
                Tasks to perform when the complete response is received
                '''
                pass

        if response.HasField("action_response"):
            '''
            This section handles action that is generated by the character
            '''
            pass

    return session_id, text_response

def getResponseGRPC(userQuery: str, sessionID: str, voiceResponse: bool) -> dict:
    '''
    This function makes an API call to the convai servers to get back
    a response from the bot to the given user query.
    Returns:
        text: <response from the bot>
        sessionID: <marks the chat-session the conversation belongs to>  [Refer docs for more details]
    '''
    response_generator = client.GetResponse(_getResponseRequests(
        sessionID=sessionID,
        userQuery=userQuery
    ))
    session_id, text_response = _parseGRPCResponse(response_generator, sessionID, voiceResponse)
    return {
        "sessionID": session_id,
        "text": text_response
    }
